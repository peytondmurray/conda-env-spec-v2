[build-system]
requires = ["setuptools", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "conda-env-spec-v2"
description = "A V2 environment spec for conda."
readme = "README.md"
authors = [
  { name = "Peyton Murray", email = "peynmurray@gmail.com" },
]
license = { file = "LICENSE" }
classifiers = [
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
]
requires-python = ">=3.10"
dependencies = [
  # "conda >=23.9.0",
  "tomli ; python_version < '3.11'",
  "tomli-w",
  "pyyaml",
]
dynamic = ["version"]

[tool.setuptools]
packages = [
    "conda_env_spec_v2"
]

[project.urls]
homepage = "https://github.com/conda-incubator/conda-env-spec-v2"

[project.entry-points.conda]
conda-declarative = "conda_env_spec_v2.plugin"

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]

[tool.coverage.run]
source = ["conda_env_spec_v2/", "tests/"]

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # pep8 naming
    "N",
    # pydocstyle
    "D",
    # annotations
    "ANN",
    # debugger
    "T10",
    # flake8-pytest
    "PT",
    # flake8-return
    "RET",
    # flake8-unused-arguments
    "ARG",
    # flake8-fixme
    "FIX",
    # flake8-eradicate
    "ERA",
    # pandas-vet
    "PD",
    # numpy-specific rules
    "NPY",
]
ignore = [
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN204", # Missing return type annotation for special method
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line before after class docstring
    "D204", # 1 blank line required after class docstring
    "D206", # Advised to disable by ruff-format
    "D211", # No blank line before class
    "D213", # Multiline summary second line
    "D413", # 1 blank line after parameters
    "E501", # Advised to disable by ruff-format
    "PD901", # Avoid using 'df' for pandas dataframes. Perfectly fine in functions with limited scope
    "SIM108", # Simplify if/else to one line; not always clearer
    "W191", # Advised to disable by ruff-format
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # Unused import
]
"test_*.py" = [
    "ANN001", # Type annotations aren't needed for tests; these are fixtures or parametrizations
    "ANN201" # Ignore return type annotations
]
